apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'spring-boot'

apply from: 'source.gradle'

apply from: 'ci.properties'

import groovy.json.JsonSlurper

task setVersion {
  description  'Defines the version from the state in git'
  dependsOn 'taGit'
  doFirst {
    version = getVersionName()
    println 'Version: ' + version
    // create a version.env file for Jenkins
    def envFile = new File('version.env')
    envFile.write 'VERSION=' + version +'\n'
  }
}

group = 'org.apache.mesos.kibana'

/*
 * When you build a new release
 * this task tags the repository
 *
 * gradle build -PtagRelease
 *
 */

task taGit {
  description 'Create an annotated tag on the current sha1 using the content of the file tag.txt'
  doFirst {
    apply from: 'release.properties'
    assert 0 < tagString.length()
    assert 0 < tagMessage.length()

    println 'Using: git tag -a -m ' + tagMessage + ' ' + tagString
    // ToDo: Add error handling
    exec {
      commandLine 'git', 'tag', '-a', '-m', tagMessage, tagString
    }

  }

}
taGit.onlyIf { project.hasProperty('tagRelease') }

task latestBuild {
  def jsonUrl = ''

  if (project.hasProperty('verifyBuild')) {
    logger.info('Verify')
    jsonUrl = ciVerify + ciJsonTree
  } else {
    logger.info('Release')
    jsonUrl = ciRelease + ciJsonTree
  }
  def jsonTxt = jsonUrl.toURL().text

  logger.debug(jsonTxt)

  def jsonSlurper = new JsonSlurper()
  def json = jsonSlurper.parseText(jsonTxt)

  def relativePath
  for (artifact in json.lastSuccessfulBuild.artifacts) {
    logger.debug(artifact.toString())
    if (artifact.fileName =~ /kibana.*jar/) {
      relativePath = artifact.relativePath
    }
  }
  assert 0 < relativePath.length()

  if (project.hasProperty('verifyBuild')) {
    ciLatestJar = ciVerify + ciLastArtifacts + relativePath
  } else {
    ciLatestJar = ciRelease + ciLastArtifacts + relativePath
  }
  logger.info(ciLatestJar)
}

task deploy {

  dependsOn 'latestBuild'

  doFirst{
    apply from: 'deploy.properties'

    // ToDo: Complete for SSH set ups
    // ToDo: Allow image names and detect IP in docker set ups
    // ToDo: unless elasticsearch have data add shaspear set
    def baseCmd = []
    def dockerSys = 0
    def mesosMaster
    def masterSwitch

    def stdout
    def stderr

    // ToDo: split this in 3 separate funtions in source.gradle
    // first docker image or system w SSH
    if (project.hasProperty('deploySSH') & deploySSH.length() > 0) {
      println 'SSH: ' + deploySSH
      baseCmd = ['ssh', deploySSH, '-c']
    } else if (project.hasProperty('deployDocker') & deployDocker.length() > 0) {
      println 'Docker: ' + deployDocker
      dockerSys = 1
      baseCmd = ['docker', 'exec', deployDocker]
    } else {
      System.err.println 'Error:\n   One of the options must be defined'
      System.err.println '     deploySSH or deployDocker\n   in the deploy.properties file'
      System.exit(1)
    }
    // second direct master address or via zookeepr
    if (project.hasProperty('deployMaster') & deployMaster.length() >0 ) {
      mesosMaster=deployMaster
      masterSwitch='-m'
    } else if (project.hasProperty('deployZK') & deployZK.length() > 0) {
      mesosMaster=deployZK
      masterSwitch='-zk'
    } else {
      System.err.println 'Error:\n   One of the options must be defined'
      System.err.println '     deployMaster or deployZK\n   in the deploy.properties file'
      System.exit(2)
    }
    println 'Master: ' + mesosMaster

    // finally the elastic search instances
    def esString = ''
    if (project.hasProperty('deployES1') & deployES1.length() >0) {
      esString = deployES1
    }
    if (project.hasProperty('deployES2') & deployES2.length() >0) {
      esString = esString + ',' + deployES2
    }
    if (project.hasProperty('deployES3') & deployES3.length() >0) {
      esString = esString + ',' + deployES3
    }
    if (project.hasProperty('deployES4') & deployES4.length() >0) {
      esString = esString + ',' + deployES4
    }
    if (project.hasProperty('deployES5') & deployES5.length() >0) {
      esString = esString + ',' + deployES5
    }
    if (esString.length() > 0) {
      println 'ES: ' + esString
    } else {
      System.err.println 'Error:\n   One elastic search instance must be defined'
      System.err.println '     deployESn\n   in the deploy.properties file'
      System.exit(2)
    }
    // which curl
    println 'Base:' + baseCmd

    def exitCode
    (exitCode, stdout, stderr) = runExec(baseCmd + ['which', 'curl'])
    if (stderr.length() ==0) {
      if (stdout.length() ==0) {
        if (dockerSys == 1) {
          //0 install curl
          execErrorHandler(runExec(baseCmd + ['apt-get', 'update']))
          execErrorHandler(runExec(baseCmd + ['apt-get', 'install', 'curl']))
        } else {
          println 'Please install curl on the mesos-master '
          System.exit(1)
        }
      }
    } else {
      println 'Error: ' + stderr
      System.exit(1)
    }
    // 1 curl down latest kibana  to kibana.jar
    println ciLatestJar
    execErrorHandler(runExec(baseCmd + ['curl', '-sf', ciLatestJar, '-o', 'kibana.jar']))

    if (dockerSys==1) {
      execErrorHandler(runExec(['docker', 'exec', '-d', deployDocker, 'java', '-jar', 'kibana.jar', masterSwitch, mesosMaster, '-es', esString]))
    }
  }
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.5.RELEASE")
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile(

            [group: 'commons-cli', name: 'commons-cli', version: '1.3.1'],
            [group: 'org.apache.mesos', name: 'mesos', version: '0.22.1'],
            [group: 'org.slf4j', name: 'slf4j-api', version: '1.7.7'],
            [group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '1.2.5.RELEASE'])
    testCompile(
            [group: 'org.mockito', name: 'mockito-all', version: '1.10.19'],
            [group: 'junit', name: 'junit', version: '4.10'])
}

jar {
    dependsOn 'setVersion'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } } // Include dependencies
    manifest {
        attributes 'Main-Class': 'org.apache.mesos.kibana.KibanaFramework'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}
